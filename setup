#************ setup and test on MAC
brew install vault
#************ or downlaod the vault binary and save it in your workspace

#*******Install and setup  GO env
brew install golang
go version
go env GOPATH
go env -w GOPATH=~/Workspace/go
go get github.com/hashicorp/vault/api
go get github.com/hashicorp/go-hclog.
#*******hack - rename the hashicorp vault vendor directory to fix build errors
mv ~/Workspace/go/src/github.com/hashicorp/vault/vendor/github.com/hashicorp/vault ~/Workspace/go/src/github.com/hashicorp/vault/vendor/github.com/hashicorp/vault_back

#******* Generate Certs
mkdir certs
cd certs
openssl req -x509 -out localhost.crt -keyout localhost.key   -newkey rsa:2048 -nodes -sha256   -subj '/CN=localhost' -extensions EXT -config <( \
   printf "[dn]\nCN=localhost\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:localhost\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth")
cat certs/localhost.crt  | openssl x509 -noout -enddate

openssl req -x509 -out server.crt -keyout server.key   -newkey rsa:2048 -nodes -sha256   -subj '/CN=vault.upstart.com' -extensions EXT -config <( \
   printf "[dn]\nCN=vault.upstart.com\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:vault.upstart.com\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth")


#*******update your hosts file to point localhost  to 127.0.0.1
vi /etc/hosts
#add the following line to it
127.0.0.1   localhost

#*******create the vault storage & plugin dir
mkdir -p vault/data
mkdir vault/plugin

#*******For self signed certs set skip verify before startinng the server
export VAULT_SKIP_VERIFY=true

#*******Start the vault server
~/Workspace/bin/vault server -config=config.hcl 
~/Workspace/bin/vault   operator init -key-shares=1 -key-threshold=1  -format "json" 
#*******Save the unseal keys and root token 
export admintoken=your_root_token 

#*******setup the vault endpoint for the vault client
export VAULT_ADDR='https://localhost:8200'
export VAULT_SKIP_VERIFY=true

#*******Now Unseal Vault
~/Workspace/bin/vault operator unseal 
~/Workspace/bin/vault status 

#*******login using the root token since you will need to be privileged to setup plugin
~/Workspace/bin/vault login 

#******** Enable Secrets Engine
~/Workspace/bin/vault secrets enable -version=1 kv

#~/Workspace/bin/vault secrets enable -version=2 kv

#*******update default policy to allow authenticated users to make exchange API calls
 ~/Workspace/bin/vault read sys/policy/default > default_policy.hcl
vi default_policy.hcl
#*******Remove comments (first 3 lines) &  add the following to the default policy

# Vault Exchange Commands
path "auth/exchange/grant/access/*" {
    capabilities = ["update"]
}
path "auth/exchange/register/group" {
    capabilities = ["update"]
}
path "auth/token/lookup" {
    capabilities = ["read"]
}

#********* Update the default policy
~/Workspace/bin/vault policy write default  default_policy.hcl

#Enable OIDC authentication
~/Workspace/bin/vault auth enable oidc

#*********** - example ONELOGIN  SSO 
export CLIENT_ID=$$$$$$$$$$$$$$$$
export CLIENT_SECRET=$$$$$$$$$$$$$$$
~/Workspace/bin/vault write auth/oidc/config oidc_discovery_url=$ENDPOINT oidc_client_id=$CLIENT_ID oidc_client_secret=$CLIENT_SECRET default_role="onelogin"
 ~/Workspace/bin/vault write auth/oidc/role/onelogin bound_audiences="$CLIENT_ID" allowed_redirect_uris="https://localhost:8200/ui/vault/auth/oidc/oidc/callback" user_claim="preferred_username" groups_claim="groups" oidc_scopes="groups"  policies="default"

#*********** - example OKTA SSO
export API_TOKEN=$$$$$$$$$$$$$$$ //Token to read group information from OIDC server
export API_URL=https://upstart.okta.com/api/v1 
export CLIENT_ID=$$$$$$$$$$$$$$$$ //OKTA OIDC Client ID for Vault
export CLIENT_SECRET=$$$$$$$$$$$$$$$ //OKTA OIDC Client Secret for Vault
export ENDPOINT=https://upstart.okta.com/oauth2/$$$$$$$$$$$$$$$$ //OKTA OIDC Authorization Server For Vault

~/Workspace/bin/vault write auth/oidc/config oidc_discovery_url=$ENDPOINT oidc_client_id=$CLIENT_ID oidc_client_secret=$CLIENT_SECRET default_role="okta"
~/Workspace/bin/vault write auth/oidc/role/okta -<<EOF
{
"user_claim": "name",
"bound_audiences": ["api://vault","$CLIENT_ID"],
"allowed_redirect_uris": "https://localhost:8200/ui/vault/auth/oidc/oidc/callback",
"role_type": "oidc",
"oidc_scopes": ["profile","openid"],
"groups_claim" : "groups",
"policies": "default"
}
EOF


curl -X GET -H "Accept: application/json"  -H "Authorization: SSWS ${API_TOKEN}"   https://upstart.okta.com/api/v1/users/hardeep.singh/groups



#************* Setup PKI **************************
export CN=upstart.com
#~/Workspace/bin/vault  secrets enable pki
#~/Workspace/bin/vault  secrets move pki upstart-client
~/Workspace/bin/vault  secrets enable -path=upstart-client pki
~/Workspace/bin/vault  secrets tune -max-lease-ttl=8760h upstart-client
~/Workspace/bin/vault write upstart-client/root/generate/internal common_name=upstart.com ttl=8760h
~/Workspace/bin/vault write upstart-client/config/urls issuing_certificates="https://localhost:8200/v1/upstart-client/ca" crl_distribution_points="https://localhost:8200/v1/upstart-client/crl"
~/Workspace/bin/vault write upstart-client/roles/issuecerts allow_any_name=true allowed_domains=upstart.com allow_subdomains=true max_ttl=24h client_flag=true server_flag=false

~/Workspace/bin/vault  secrets enable -path=upstart-server pki
~/Workspace/bin/vault  secrets tune -max-lease-ttl=8760h upstart-server
~/Workspace/bin/vault write upstart-server/root/generate/internal common_name=upstart.com ttl=8760h
~/Workspace/bin/vault write upstart-server/config/urls issuing_certificates="https://localhost:8200/v1/upstart-server/ca" crl_distribution_points="https://localhost:8200/v1/upstart-server/crl"
~/Workspace/bin/vault write upstart-server/roles/issuecerts  allowed_domains=upstart.com allow_subdomains=true max_ttl=8760h client_flag=false server_flag=true


#*******Setup the plugin
mkdir vault/plugin
mkdir vault/log

go build
rm vault/log/vault-exchange.log 
cp vault-exchange vault/plugin
export SHA256=$(shasum -a 256 vault/plugin/vault-exchange | cut -d' ' -f1)
~/Workspace/bin/vault login $admintoken 
~/Workspace/bin/vault auth disable exchange 
~/Workspace/bin/vault write sys/plugins/catalog/vault-exchange  sha_256="${SHA256}" command="vault-exchange" 
~/Workspace/bin/vault auth enable -path=exchange  -plugin-name=vault-exchange plugin 
~/Workspace/bin/vault plugin list  | grep vault-exchange
~/Workspace/bin/vault write auth/exchange/setup display_name=exchange root_path=kv root_token=$admintoken  admin_group="Vault-Admin" client_certs_pki="upstart-client" server_certs_pki="upstart-server"  certs_cn=$CN certs_role="issuecerts"
~/Workspace/bin/vault write auth/exchange/authz/config api_token=$API_TOKEN api_url=$API_URL 

list sys/policy
read sys/policy/groups-aws-admin
write auth/exchange/cert/server/create  name="hardeep"
read sys/policy/groups-aws-eng-infosec
write  auth/exchange/grant/cert/group name="aws-eng-infosec"
write  auth/exchange/revoke/cert/group name="aws-eng-infosec"
read sys/policy/groups-aws-eng-infosec
write auth/exchange/cert/client/create  name="hardeep"
list sys/policy
read sys/policy/groups-aws-eng-infosec



write auth/exchange/register/group  name="AWS-Eng-InfoSec"
write auth/exchange/grant/access/group  name="AWS-Admin" privilege="r" path="AWS-Eng-InfoSec/group_secrets/*"
write  auth/exchange/grant/cert/group name="AWS-Eng-InfoSec"
write auth/exchange/register/aws name="smoke-role" arn="arn:aws:iam::903664935542:role/smoke-role" group="AWS-Eng-InfoSec"
write auth/exchange/cert/client/create  type="X509"


#Login from UI using OIDC and your SSO. Use the console in the UI to make all the subsequent calls

write auth/exchange/register/group  name={groupsname}
#group name is case sensitive
write auth/exchange/register/group  name="AWS-Eng-InfoSec"
#This step will create the following  path "kv/secret/data/groups/{groupsname}/group_secrets/"

#grant access to group for server certs
write auth/exchange/grant/access/group  name={source_groupsname} privilege="r/w/rw" path="{groupsname}/group_secrets/"
write auth/exchange/grant/access/group  name="AWS-Admin" privilege="r" path="Infosec/group_secrets/*"
#grant access to group for path in another group
write  auth/exchange/grant/cert/group name={groupsname}

write auth/exchange/cert/client/create  type="X509"
#copy data field to file /tmp/cert and then call : 
cat /tmp/cert | jq | awk '{gsub(/\\n/,"\n")}1' >  /tmp/cert.pem
openssl x509 -in /tmp/cert.pem -text


#*************** Enable AWS Authentication
~/Workspace/bin/vault auth enable aws 
#~/Workspace/bin/vault write auth/aws/config/client secret_key=$AWS_VAULT_USER_SECRET access_key=$AWS_VAULT_USER_ID

~/Workspace/bin/vault write auth/aws/role/dev-role-iam auth_type=iam bound_iam_principal_arn=arn:aws:iam::123456789012:role/MyRole policies=prod,dev max_ttl=500h

#*************** Enable AWS Authentication
vault auth enable kubernetes
vault write auth/kubernetes/config token_reviewer_jwt="reviewer_service_account_jwt" kubernetes_host=https://192.168.99.100:8443 kubernetes_ca_cert=@ca.crt



#********** Copy the vault token from the UI and use it to create a secrert using the Vault CLI
~/Workspace/bin/vault login  login token=$copied_token-here
~/Workspace/bin/vault kv put kv/secret/data/groups/Infosec/group_secrets/my_new_secret key=mysecret





#*********** If you want to see the policy that was created when you registered the group
~/Workspace/bin/vault read sys/policy/groups-Your_SSO_group_Name_Here > temp
~/Workspace/bin/vault policy write groups-groups-Your_SSO_group_Name_Here temp



# *********************************** Misc
~/Workspace/bin/vault  secrets list
~/Workspace/bin/vault read  upstart-client/roles/upstart-com 
~/Workspace/bin/vault read  upstart-client/config/urls
~/Workspace/bin/vault write  upstart-client/tidy safety_buffer="8h"
~/Workspace/bin/vault list  upstart-client/certs


~/Workspace/bin/vault write upstart-client/config/ca pem_bundle(private_key+public_key)
~/Workspace/bin/vault write upstart-client/issue/issuecerts  common_name="hardeep.singh"
openssl x509 -in /tmp/cert.pem -text

vi csr.conf
openssl req -new -key self-ssl.key -out self-ssl.csr -config csr.conf
openssl req -in self-ssl.csr -text -noout
~/Workspace/bin/vault write pki/sign-verbatim/upstart-com  csr=@/Users/hardeepsingh/Workspace/security/vault-exchange/self-ssl.csr 



#****************** utility calls
~/Workspace/bin/vault path-help  entity
~/Workspace/bin/vault list identity/group/name
~/Workspace/bin/vault list sys/policy
~/Workspace/bin/vault read sys/policy/....
~/Workspace/bin/vault  kv list kv/
~/Workspace/bin/vault  kv list kv/secret/data/groups/
~/Workspace/bin/vault  secrets list -detailed
